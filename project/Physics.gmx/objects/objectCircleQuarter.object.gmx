<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteCircleQuarterNeutral</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objectPoint</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///construct
image_angle = 0;
defaultAngle = 0;
//particle = instance_create(x, y, objectCircleQuarterParticle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objectBall">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>other.collisionObj != self.id</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reflection
if (collision_circle(global.centerX, global.centerY, global.outerR - other.maskWidth, objectBall, false, true) == noone){
    other.collisionObj = self.id;
    other.collisionTimeOut = other.defaultCollisionTimeOut;
    var inverseVelocity = getInverseVector(other.velocity);
    var inAngle = getAngleToX(inverseVelocity);
    var centerVector = getVectorByPoints(global.centerX, global.centerY, other.x, other.y);
    var centerAngle = getAngleToX(centerVector);
    var outAngle = 360 - inAngle + centerAngle * 2;
    
    while (outAngle &gt;= 360){
        outAngle -= 360;
    }
    while (outAngle &lt; 0){
        outAngle += 360;
    }
    
    newValueX = cos(degtorad(outAngle)) * other.velocity.value;
    newValueY = sin(degtorad(outAngle)) * -1 * other.velocity.value;
    
    newValue = sqrt(sqr(newValueX) + sqr(newValueY));
    setVectorValue(other.velocity, newValue);
    if (other.velocity.value &gt; 0){
        other.velocity.normX = newValueX / newValue;
        other.velocity.normY = newValueY / newValue;
    }
    else{
         other.velocity.normX = 0;
         other.velocity.normY = 0;
    }
    if (global.status == 1){
       hit = instance_create(other.x, other.y, objectCollisionPoint);
       hit.inVector = inverseVelocity;
       hit.centerVector = centerVector;
       hit.outVector = vectorClone(other.velocity);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>300,300</point>
    <point>300,300</point>
  </PhysicsShapePoints>
</object>
