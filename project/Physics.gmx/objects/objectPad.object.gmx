<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>objectRelativePoint</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///construct
event_inherited();
vectorConstruct(relativePosition, 0, 1, 0, 0, 50, 0);
vectorConstruct(defaultPosition, 0, 1, 0, 0, 0, 0);
vectorConstruct(initialPosition, 0, 1, 0, 0, 0, 0);
padRotation = -90;
frictionMove = 0.2;
frictionCollision = 0.3;
circleCenterPoint = instance_create(global.centerX, global.centerY, objectCenterPoint);
circleCenterPoint.r = global.innerR;
goal = 0;
color = 0;
sprite = 0;
maskWidth = 96;
vectorConstruct(rotation, 1, 0, -1, 1, 1, 1);
setVectorNormByAngle(rotation, padRotation);
vectorConstruct(acceleration, 0, rotation.normX, rotation.normY, 0.35, 1, 0);
vectorConstruct(velocity, 0, rotation.normX, rotation.normY, 0, 9, 0);
//alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = sprite;
alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spritePadOrangeIdle;
alarm[1] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objectBall">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>other.collisionObj != self</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setCollision
other.collisionObj = self;
other.collisionTimeOut = other.defaultCollisionTimeOut;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///force
var f = instance_create(x, y, objectForce);
f.apply = 4;
setVectorValue(f.force, other.velocity.value);
if (getAngleToVector(other.velocity, getVectorByPoints(global.centerX, global.centerY, x, y)) &gt;= 90){
    f.force.normX = 1;    
}
else{
    f.force.normX = -1;    
    exit;
}
f.force.normY = 0;
ds_list_add(forces, f);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reflection
var inverseVelocity = getInverseVector(other.velocity);
var inAngle = getAngleToX(inverseVelocity);
var centerVector = getVectorByPoints(global.centerX, global.centerY, x, y);
var centerAngle = getAngleToX(centerVector);
var outAngle = 360 - inAngle + centerAngle * 2;
var newValueX;
var newValueY;
var newValue;

while (outAngle &gt;= 360){
    outAngle -= 360;
}
while (outAngle &lt; 0){
    outAngle += 360;
}

newValueX = cos(degtorad(outAngle)) * other.velocity.value + anchor.velocity.normX * anchor.velocity.value * frictionCollision;
newValueY = sin(degtorad(outAngle)) * -1 * other.velocity.value + anchor.velocity.normY * anchor.velocity.value * frictionCollision;

newValue = sqrt(sqr(newValueX) + sqr(newValueY));
setVectorValue(other.velocity, newValue);
if (other.velocity.value &gt; 0){
    other.velocity.normX = newValueX / newValue;
    other.velocity.normY = newValueY / newValue;
}
else{
     other.velocity.normX = 0;
     other.velocity.normY = 0;
}
if (global.status == 1){
   hit = instance_create(other.x, other.y, objectCollisionPoint);
   hit.inVector = inverseVelocity;
   hit.centerVector = centerVector;
   hit.outVector = vectorClone(other.velocity);
}
//destroy 
else{
     destroyVector(inverseVelocity);
     destroyVector(centerVector);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rotate goal
if (global.arena.static == false){
   setGoalAngle(goal, anchor.image_angle);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//shader_set(shaderTest);
draw_self();
//shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,50</point>
    <point>50,50</point>
  </PhysicsShapePoints>
</object>
