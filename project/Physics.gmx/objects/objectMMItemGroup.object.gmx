<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objectPoint</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///construct
event_inherited();
items = ds_list_create();
selected = 0;
goal = 0;
active = false;
itemWidth = 0;
switchTime = 0;
accelerationTime = 0;
outOfRange = false;
esc = 0
fade = 20;
currentFade = 0;
proccessFade = 0;
confirmed = -1;
border = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control out of range
if (goal &lt; 0){
   goal = 0;
   outOfRange = true;
}
else if (goal &gt; ds_list_size(items) -1){
     goal = ds_list_size(items) - 1;
     outOfRange = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fading
if (proccessFade != 0){
   if (currentFade == fade){
      proccessFade = 0;
      currentFade = 0;
   }
   else{
        currentFade++;
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move input
if (active == true &amp;&amp; confirmed == -1){
    if (keyboard_check(vk_left)){
       //ak idem opacne =&gt; ak som pred tym stlacil vpraco
       if (goal &gt; selected &amp;&amp; outOfRange == false){
          goal = floor(selected)
       }
       //ak som este nic nestlacil
       else if (goal == selected){
            goal = selected - 1;
            alarm[0] = 4;
       }
    }
    if (keyboard_check(vk_right)){
       //ak idem opacne =&gt; ak som pred tym stlacil vlavo
       if (goal &lt; selected &amp;&amp; outOfRange == false){
          goal = ceil(selected)
       }
       //ak som pred tym nic nestlacil
       else if (goal == selected){
            goal = selected + 1;
            alarm[0] = 4;
       }
    }
}
if (goal != selected &amp;&amp; abs(goal - selected) &gt;= velocity.value / itemWidth){
   if (goal &lt; selected){
       setVectorNormByVector(velocity, rotation, -1);
    }
    else{
         setVectorNormByVector(velocity, rotation, 1);
    }
    setVectorValue(velocity, itemWidth / switchTime);
}
else{
     selected = goal;
     setVectorValue(velocity, 0);
     outOfRange = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enter or esc
if (active == true &amp;&amp; confirmed == -1 &amp;&amp; proccessFade == 0){
   //enter
   if (keyboard_check(vk_enter)){
      confirmed = goal;
      if (goal &lt; 0){
         confirmed = 0;
      }
      else if (goal &gt;= ds_list_size(items)){
           confirmed = ds_list_size(items) - 1;
      }
      proccessFade = -1;
      active = false;
   }
   //esc
   if (keyboard_check(vk_escape)){
      confirmed = esc;
      proccessFade = -1;
      active = false;
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move
selected +=   angularVelocitySign(rotation, velocity) * velocity.value / itemWidth;
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set velocity items
for (var i = 0; i &lt; ds_list_size(items); i++){
    setVectorValue(items[| i].velocity, velocity.value);
    setVectorNormByVector(items[| i].velocity, items[| i].rotation,  angularVelocitySign(rotation, velocity));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///trigger confirmed item
if (confirmed &gt; -1 &amp;&amp; proccessFade == 0){
   items[| confirmed].trigger = ev_user0;
   confirmed = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
